(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{488:function(v,_,t){"use strict";t.r(_);var r=t(0),d=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"一-单例概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-单例概念"}},[v._v("#")]),v._v(" 一.单例概念")]),v._v(" "),t("p",[v._v("单例概念：")]),v._v(" "),t("ul",[t("li",[v._v("作为对象的创建模式，单例模式确保某"),t("font",{attrs:{color:"red"}},[v._v("一个类")]),v._v("只有"),t("font",{attrs:{color:"red"}},[v._v("一个实例")]),v._v("，而且"),t("font",{attrs:{color:"red"}},[v._v("自行实例化")]),v._v("并"),t("font",{attrs:{color:"red"}},[v._v("向整个系统提供")]),v._v("这个实例。这个类称为单例类。")],1)]),v._v(" "),t("br"),v._v(" "),t("p",[v._v("单例特点：")]),v._v(" "),t("ul",[t("li",[v._v("单例类只能有"),t("font",{attrs:{color:"red"}},[v._v("一个实例")]),v._v("。")],1),v._v(" "),t("li",[v._v("单例类必须"),t("font",{attrs:{color:"red"}},[v._v("自己创建")]),v._v("自己的唯一实例。")],1),v._v(" "),t("li",[v._v("单例类必须"),t("font",{attrs:{color:"red"}},[v._v("给所有其他对象提供")]),v._v("这一实例。")],1)]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"二-单例作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-单例作用"}},[v._v("#")]),v._v(" 二.单例作用")]),v._v(" "),t("ol",[t("li",[v._v("在要求线程安全的情况下，保证了类实例的唯一性。"),t("font",{attrs:{color:"red"}},[v._v("线程安全")]),v._v("。")],1),v._v(" "),t("li",[v._v("在不需要多实例存在时，保证了类实例的单一性。"),t("font",{attrs:{color:"red"}},[v._v("不浪费内存")]),v._v("。")],1)]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"三-实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-实现方式"}},[v._v("#")]),v._v(" 三.实现方式")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("序号")]),v._v(" "),t("th",[v._v("单例实现方式")]),v._v(" "),t("th",[v._v("线程安全")]),v._v(" "),t("th",[v._v("延迟初始化")]),v._v(" "),t("th",[v._v("能够继承")]),v._v(" "),t("th",[v._v("代码举例")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("1")]),v._v(" "),t("td",[v._v("饿汉模式")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("2")]),v._v(" "),t("td",[v._v("懒汉模式")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("3")]),v._v(" "),t("td",[v._v("双重检查加锁")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("4")]),v._v(" "),t("td",[v._v("静态内部类")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("5")]),v._v(" "),t("td",[v._v("枚举")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td")])])]),v._v(" "),t("br"),v._v(" "),t("ul",[t("li",[t("p",[v._v("以上构造函数私有，不能被继承，在Spring中我们需要特殊的单例模式，即单例注册表。")])]),v._v(" "),t("li",[t("p",[v._v("单例注册表：Spring框架对单例的支持是采用单例注册表 + 多重判断加锁的方式进行实现的，对于一些类启动就通过静态代码块放入注册表map，对于另一些使用的时候在放入返回。并通过Synchronized实现了线程安全。")])])]),v._v(" "),t("p",[v._v("// 枚举本质\n// 单例注册表剖析")])])}),[],!1,null,null,null);_.default=d.exports}}]);